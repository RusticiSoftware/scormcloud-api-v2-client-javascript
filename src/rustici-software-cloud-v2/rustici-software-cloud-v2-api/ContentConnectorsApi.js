/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ConnectorListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateConnectorSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateConnectorSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/ConnectorListSchema'), require('../rustici-software-cloud-v2-model/CreateConnectorSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/StringResultSchema'), require('../rustici-software-cloud-v2-model/UpdateConnectorSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.ContentConnectorsApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.ConnectorListSchema, root.RusticiSoftwareCloudV2.CreateConnectorSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.StringResultSchema, root.RusticiSoftwareCloudV2.UpdateConnectorSchema);
  }
}(this, function(ApiClient, ConnectorListSchema, CreateConnectorSchema, MessageSchema, StringResultSchema, UpdateConnectorSchema) {
  'use strict';

  /**
   * ContentConnectors service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi
   * @version 2.1.0
   */

  /**
   * Constructs a new ContentConnectorsApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createConnector operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~createConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A call to this method will create a new content connector and return a newly created Id for it. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateConnectorSchema} connector 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~createConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createConnector = function(connector, callback) {
      var postBody = connector;

      // verify the required parameter 'connector' is set
      if (connector === undefined || connector === null) {
        throw new Error("Missing the required parameter 'connector' when calling createConnector");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/contentConnectors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnector operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~deleteConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a connector 
     * Delete the specified connector. 
     * @param {String} connectorId the connector id
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~deleteConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteConnector = function(connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'connectorId' is set
      if (connectorId === undefined || connectorId === null) {
        throw new Error("Missing the required parameter 'connectorId' when calling deleteConnector");
      }


      var pathParams = {
        'connectorId': connectorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contentConnectors/{connectorId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectorsList operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~getConnectorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ConnectorListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all Content Connectors for the application 
     * Get list of all Content Connectors in this application. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAdditionalInstanceInformation 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~getConnectorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ConnectorListSchema}
     */
    this.getConnectorsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'includeAdditionalInstanceInformation': opts['includeAdditionalInstanceInformation'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConnectorListSchema;

      return this.apiClient.callApi(
        '/contentConnectors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnector operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~updateConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration or enabled flag associated with `connectorId`. 
     * @param {String} connectorId the connector id
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateConnectorSchema} connector 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ContentConnectorsApi~updateConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateConnector = function(connectorId, connector, callback) {
      var postBody = connector;

      // verify the required parameter 'connectorId' is set
      if (connectorId === undefined || connectorId === null) {
        throw new Error("Missing the required parameter 'connectorId' when calling updateConnector");
      }

      // verify the required parameter 'connector' is set
      if (connector === undefined || connector === null) {
        throw new Error("Missing the required parameter 'connector' when calling updateConnector");
      }


      var pathParams = {
        'connectorId': connectorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contentConnectors/{connectorId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
