/**
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateRegistrationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CreateRegistrationSchema'), require('../rustici-software-cloud-v2-model/LaunchHistoryListSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkRequestSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/RegistrationListSchema'), require('../rustici-software-cloud-v2-model/RegistrationSchema'), require('../rustici-software-cloud-v2-model/SettingListSchema'), require('../rustici-software-cloud-v2-model/SettingsPostSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/XapiStatementResult'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.RegistrationApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CreateRegistrationSchema, root.RusticiSoftwareCloudV2.LaunchHistoryListSchema, root.RusticiSoftwareCloudV2.LaunchLinkRequestSchema, root.RusticiSoftwareCloudV2.LaunchLinkSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.RegistrationListSchema, root.RusticiSoftwareCloudV2.RegistrationSchema, root.RusticiSoftwareCloudV2.SettingListSchema, root.RusticiSoftwareCloudV2.SettingsPostSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.XapiStatementResult);
  }
}(this, function(ApiClient, BatchTagsSchema, CreateRegistrationSchema, LaunchHistoryListSchema, LaunchLinkRequestSchema, LaunchLinkSchema, MessageSchema, RegistrationListSchema, RegistrationSchema, SettingListSchema, SettingsPostSchema, TagListSchema, XapiStatementResult) {
  'use strict';

  /**
   * Registration service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi
   * @version 1.1.0-beta
   */

  /**
   * Constructs a new RegistrationApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNewRegistrationInstance operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createNewRegistrationInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance for this registration specified by the registration ID. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createNewRegistrationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createNewRegistrationInstance = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling createNewRegistrationInstance");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRegistration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateRegistrationSchema} registration 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.courseVersion The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRegistration = function(registration, opts, callback) {
      opts = opts || {};
      var postBody = registration;

      // verify the required parameter 'registration' is set
      if (registration == undefined || registration == null) {
        throw new Error("Missing the required parameter 'registration' when calling createRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseVersion': opts['courseVersion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistration = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
     * @param {String} registrationId id for this registration
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationConfigurationSetting = function(registrationId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId == undefined || settingId == null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteRegistrationConfigurationSetting");
      }


      var pathParams = {
        'registrationId': registrationId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationInstanceConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the &#x60;settingId&#x60; value for this registration instance. 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationInstanceConfigurationSetting = function(registrationId, instanceId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationInstanceConfigurationSetting");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteRegistrationInstanceConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId == undefined || settingId == null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteRegistrationInstanceConfigurationSetting");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationProgress = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationProgress");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/progress', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the provided tags for this registration. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationTags = function(registrationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationsGlobalData operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationsGlobalDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationsGlobalDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationsGlobalData = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationsGlobalData");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/globalData', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all configuration settings for this registration. 
     * @param {String} registrationId id for this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getRegistrationConfiguration = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all configuration settings for this registration instance. 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getRegistrationInstanceConfiguration = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceLaunchHistory operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceLaunchHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns history of the launches of the specified instance of this registration. 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeHistoryLog Whether to include the history log in the launch history (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceLaunchHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema}
     */
    this.getRegistrationInstanceLaunchHistory = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceLaunchHistory");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceLaunchHistory");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeHistoryLog': opts['includeHistoryLog']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchHistoryListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/launchHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema}
     */
    this.getRegistrationInstanceProgress = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceProgress");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceProgress");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getRegistrationInstanceStatements = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceStatements");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceStatements");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstances operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the instances of this the registration specified by the registration ID 
     * @param {String} registrationId id for this registration
     * @param {Object} opts Optional parameters
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema}
     */
    this.getRegistrationInstances = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstances");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'until': opts['until'],
        'since': opts['since'],
        'more': opts['more'],
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationLaunchHistory operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns history of this registration&#39;s launches. 
     * @param {String} registrationId id for this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeHistoryLog Whether to include the history log in the launch history (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema}
     */
    this.getRegistrationLaunchHistory = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationLaunchHistory");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeHistoryLog': opts['includeHistoryLog']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchHistoryListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/launchHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationLaunchLink operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the link to use to launch this registration. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema} launchLinkRequest 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.getRegistrationLaunchLink = function(registrationId, launchLinkRequest, callback) {
      var postBody = launchLinkRequest;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationLaunchLink");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest == undefined || launchLinkRequest == null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling getRegistrationLaunchLink");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/launchLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
     * @param {String} registrationId id for this registration
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema}
     */
    this.getRegistrationProgress = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationProgress");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for &#x60;registrationId&#x60;. 
     * @param {String} registrationId id for this registration
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getRegistrationStatements = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationStatements");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/xAPIStatements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the tags applied to this registration. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getRegistrationTags = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of registrations including a summary of the status of each registration. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only registrations for the specified course id will be included.
     * @param {String} opts.learnerId Only registrations for the specified learner id will be included.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema}
     */
    this.getRegistrations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more'],
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationListSchema;

      return this.apiClient.callApi(
        '/registrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putRegistrationTags = function(registrationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling putRegistrationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling putRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistrationTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets all of the provided tags on all of the provided registrations. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Object representing an array of ids to apply an array of tags to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putRegistrationTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch == undefined || batch == null) {
        throw new Error("Missing the required parameter 'batch' when calling putRegistrationTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationExists operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~registrationExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~registrationExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registrationExists = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling registrationExists");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRegistrationConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration settings for this registration. 
     * @param {String} registrationId id for this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setRegistrationConfiguration = function(registrationId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling setRegistrationConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings == undefined || configurationSettings == null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setRegistrationConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRegistrationInstanceConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationInstanceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration settings for this registration instance. 
     * @param {String} registrationId id for this registration
     * @param {Number} instanceId The instance of this registration
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationInstanceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setRegistrationInstanceConfiguration = function(registrationId, instanceId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'registrationId' is set
      if (registrationId == undefined || registrationId == null) {
        throw new Error("Missing the required parameter 'registrationId' when calling setRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw new Error("Missing the required parameter 'instanceId' when calling setRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings == undefined || configurationSettings == null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setRegistrationInstanceConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
