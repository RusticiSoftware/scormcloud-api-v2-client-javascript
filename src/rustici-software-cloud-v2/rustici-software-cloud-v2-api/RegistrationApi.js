/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateRegistrationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/PostBackSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CreateRegistrationSchema'), require('../rustici-software-cloud-v2-model/LaunchHistoryListSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkRequestSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/PostBackSchema'), require('../rustici-software-cloud-v2-model/RegistrationListSchema'), require('../rustici-software-cloud-v2-model/RegistrationSchema'), require('../rustici-software-cloud-v2-model/SettingListSchema'), require('../rustici-software-cloud-v2-model/SettingsPostSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/XapiStatementResult'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.RegistrationApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CreateRegistrationSchema, root.RusticiSoftwareCloudV2.LaunchHistoryListSchema, root.RusticiSoftwareCloudV2.LaunchLinkRequestSchema, root.RusticiSoftwareCloudV2.LaunchLinkSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.PostBackSchema, root.RusticiSoftwareCloudV2.RegistrationListSchema, root.RusticiSoftwareCloudV2.RegistrationSchema, root.RusticiSoftwareCloudV2.SettingListSchema, root.RusticiSoftwareCloudV2.SettingsPostSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.XapiStatementResult);
  }
}(this, function(ApiClient, BatchTagsSchema, CreateRegistrationSchema, LaunchHistoryListSchema, LaunchLinkRequestSchema, LaunchLinkSchema, MessageSchema, PostBackSchema, RegistrationListSchema, RegistrationSchema, SettingListSchema, SettingsPostSchema, TagListSchema, XapiStatementResult) {
  'use strict';

  /**
   * Registration service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi
   * @version 2.1.0
   */

  /**
   * Constructs a new RegistrationApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buildRegistrationLaunchLink operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~buildRegistrationLaunchLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a launch link for a Registration 
     * Returns the launch link to use to launch the course for the registration.   Launch links are meant as a way to provide access to your content.  When a learner visits the link, the course will be launched and registration progress will start to be tracked. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema} launchLinkRequest 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~buildRegistrationLaunchLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.buildRegistrationLaunchLink = function(registrationId, launchLinkRequest, callback) {
      var postBody = launchLinkRequest;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling buildRegistrationLaunchLink");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest === undefined || launchLinkRequest === null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling buildRegistrationLaunchLink");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/launchLink', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewRegistrationInstance operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createNewRegistrationInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Registration Instance 
     * Creates a new instance of the registration.  Registration instances will be automatically created when a learner launches a new version of the course.  This allows for tracking registration progress for each of the versions of the course the learner has taken.  When the created registration instance is \"launched\", the course specified at creation time will be launched. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createNewRegistrationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createNewRegistrationInstance = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling createNewRegistrationInstance");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRegistration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Registration 
     * Creates a new registration.  Registrations are the billable unit in SCORM Cloud, and represent a link between a learner and a course.  A registration will contain a few pieces of information such as learner identifiers, the id of the course being registered for, and several other optional fields. A registration must be tied to a specific course at creation time.  When the created registration is \"launched\", the course specified at creation time will be launched. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateRegistrationSchema} registration 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.courseVersion Unless you have a reason for using this you probably do not need to. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~createRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRegistration = function(registration, opts, callback) {
      opts = opts || {};
      var postBody = registration;

      // verify the required parameter 'registration' is set
      if (registration === undefined || registration === null) {
        throw new Error("Missing the required parameter 'registration' when calling createRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseVersion': opts['courseVersion'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Registration 
     * Deletes the specified registration.  >**Caution:** >This will also delete all instances of the registration. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistration = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a configuration setting explicitly set for a Registration 
     * Clears the specified setting from the registration.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
     * @param {String} registrationId 
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationConfigurationSetting = function(registrationId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteRegistrationConfigurationSetting");
      }


      var pathParams = {
        'registrationId': registrationId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationGlobalData operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationGlobalDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset global data for a Registration 
     * Deletes the global data associated with the registration, but the registration itself will remain.  This means any progress towards the global objectives will be removed. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationGlobalDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationGlobalData = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationGlobalData");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/globalData', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationInstance operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Registration Instance 
     * Deletes the specified instance of the registration.  If deleting the last remaining instance of the registration, the registration itself will be deleted along with any associated data. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationInstance = function(registrationId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationInstance");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteRegistrationInstance");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationInstanceConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a configuration setting explicitly set for a Registration Instance 
     * Clears the specified setting from the registration instance.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationInstanceConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationInstanceConfigurationSetting = function(registrationId, instanceId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationInstanceConfigurationSetting");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteRegistrationInstanceConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteRegistrationInstanceConfigurationSetting");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a Registration 
     * Deletes the data associated with the registration, but the registration itself will remain.  This means any of the launch history, and progress will be removed.  After the data has been deleted, the registration will automatically register itself for the latest version of the course. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationProgress = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationProgress");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/progress', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags from a Registration 
     * Deletes the specified tags from the registration.  Deleting tags that do not exist will still result in a success. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~deleteRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistrationTags = function(registrationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistrationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check that a Registration exists 
     * Checks that the registration exists within SCORM Cloud.  >**Info:** >No registration data will be returned for this call. A successful `200` response indicates that the registration exists. If the registration does not exist, a `404` error will be returned instead. If you are looking for information about the registration, try calling `GetRegistrationProgress` instead. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRegistration = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective configuration settings for a Registration 
     * Returns the effective configuration settings for the registration.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
     * @param {String} registrationId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getRegistrationConfiguration = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective configuration settings for a Registration Instance 
     * Returns the effective configuration settings for the registration instance.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getRegistrationInstanceConfiguration = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceLaunchHistory operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceLaunchHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get launch history for a Registration Instance 
     * Returns the launch history of the registration instance.  This includes completion status, time taken, and pass/fail status. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeHistoryLog Whether to include the history log in the launch history (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceLaunchHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema}
     */
    this.getRegistrationInstanceLaunchHistory = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceLaunchHistory");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceLaunchHistory");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeHistoryLog': opts['includeHistoryLog'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchHistoryListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/launchHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Registration Instance 
     * Returns detailed information about the registration instance.  This includes completion status, time taken, score, and pass/fail status. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema}
     */
    this.getRegistrationInstanceProgress = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceProgress");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceProgress");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstanceStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for a Registration Instance 
     * Returns xAPI statements for the registration instance. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstanceStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getRegistrationInstanceStatements = function(registrationId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstanceStatements");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getRegistrationInstanceStatements");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationInstances operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of a Registration's Instances 
     * Returns information about all instances of the registration.  This can be useful to see information such as registration progress across versions of a course. 
     * @param {String} registrationId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema}
     */
    this.getRegistrationInstances = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationInstances");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'until': opts['until'],
        'since': opts['since'],
        'more': opts['more'],
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationLaunchHistory operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get launch history for a Registration 
     * Returns the launch history of the registration.  This includes completion status, time taken, and pass/fail status. 
     * @param {String} registrationId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeHistoryLog Whether to include the history log in the launch history (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationLaunchHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchHistoryListSchema}
     */
    this.getRegistrationLaunchHistory = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationLaunchHistory");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeHistoryLog': opts['includeHistoryLog'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchHistoryListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/launchHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationProgress operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Registration 
     * Returns detailed information about the registration.  This includes completion status, time taken, score, and pass/fail status.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
     * @param {String} registrationId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationSchema}
     */
    this.getRegistrationProgress = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationProgress");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for a Registration 
     * Returns xAPI statements for the registration. 
     * @param {String} registrationId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getRegistrationStatements = function(registrationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationStatements");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/xAPIStatements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for a Registration 
     * Returns the tags for the registration. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getRegistrationTags = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Registrations 
     * Returns a list of registrations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {String} opts.learnerId Only retrieve resources having `learnerId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to created)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to registration_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  (default to created_desc)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {Boolean} opts.includeChildResults Include information about each learning object, not just the top level in the results (default to false)
     * @param {Boolean} opts.includeInteractionsAndObjectives Include interactions and objectives in the results (default to false)
     * @param {Boolean} opts.includeRuntime Include runtime details in the results (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~getRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/RegistrationListSchema}
     */
    this.getRegistrations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'more': opts['more'],
        'includeChildResults': opts['includeChildResults'],
        'includeInteractionsAndObjectives': opts['includeInteractionsAndObjectives'],
        'includeRuntime': opts['includeRuntime'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegistrationListSchema;

      return this.apiClient.callApi(
        '/registrations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistrationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a Registration 
     * Applies the provided tags to the registration.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putRegistrationTags = function(registrationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling putRegistrationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling putRegistrationTags");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistrationTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group of tags to a group of Registrations 
     * Applies all of the provided tags on all of the provided registrations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Array of ids, and array of tags for bulk tag operations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~putRegistrationTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putRegistrationTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch === undefined || batch === null) {
        throw new Error("Missing the required parameter 'batch' when calling putRegistrationTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRegistrationConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration settings for a Registration 
     * Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
     * @param {String} registrationId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setRegistrationConfiguration = function(registrationId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling setRegistrationConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings === undefined || configurationSettings === null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setRegistrationConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRegistrationInstanceConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationInstanceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration settings for a Registration Instance 
     * Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
     * @param {String} registrationId 
     * @param {Number} instanceId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~setRegistrationInstanceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setRegistrationInstanceConfiguration = function(registrationId, instanceId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling setRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling setRegistrationInstanceConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings === undefined || configurationSettings === null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setRegistrationInstanceConfiguration");
      }


      var pathParams = {
        'registrationId': registrationId,
        'instanceId': instanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}/instances/{instanceId}/configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testRegistrationPostback operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~testRegistrationPostbackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a test postback with the provided configuration 
     * Sends a postback with dummy data to the url specified.  The postback will use additional information from the configuration provided with the request (e.g. a provided username/password will be sent along with the postback to allow for logging in to a secure page.  The format of the data sent will differ depending on whether `httpbasic` or `form` is passed for `authType`.  - With httpbasic, an authorization header will be sent with the base64 encoded credentials.  The body will be JSON formatted data. - With form, the username and password will be sent in the body of the request along with the data.  The whole body will be url encoded.  >**Note:** >The data that will be sent to the provided url is the same format as the output of the GetRegistrationProgress endpoint. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/PostBackSchema} postBack 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/RegistrationApi~testRegistrationPostbackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.testRegistrationPostback = function(postBack, callback) {
      var postBody = postBack;

      // verify the required parameter 'postBack' is set
      if (postBack === undefined || postBack === null) {
        throw new Error("Missing the required parameter 'postBack' when calling testRegistrationPostback");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/postBackTest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
