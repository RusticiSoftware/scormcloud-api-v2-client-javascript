/**
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAccountInfoSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAuthTokenSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageLinkSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/ReportageAccountInfoSchema'), require('../rustici-software-cloud-v2-model/ReportageAuthTokenSchema'), require('../rustici-software-cloud-v2-model/ReportageLinkSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.ReportingApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.ReportageAccountInfoSchema, root.RusticiSoftwareCloudV2.ReportageAuthTokenSchema, root.RusticiSoftwareCloudV2.ReportageLinkSchema);
  }
}(this, function(ApiClient, MessageSchema, ReportageAccountInfoSchema, ReportageAuthTokenSchema, ReportageLinkSchema) {
  'use strict';

  /**
   * Reporting service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ReportingApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAccountInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAccountInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the account information specified by the given app ID
     * Get all of the account information specified by the given app ID
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAccountInfoSchema}
     */
    this.getAccountInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportageAccountInfoSchema;

      return this.apiClient.callApi(
        '/reporting/accountInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportageAuthToken operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getReportageAuthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAuthTokenSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a session authentication token to use when launching Reportage
     * Get a session authentication token to use when launching Reportage
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} navPermission The navigation permissions for this Reportage session
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.admin Grant admin privileges to this Reportage session (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getReportageAuthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageAuthTokenSchema}
     */
    this.getReportageAuthToken = function(navPermission, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'navPermission' is set
      if (navPermission == undefined || navPermission == null) {
        throw new Error("Missing the required parameter 'navPermission' when calling getReportageAuthToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'navPermission': navPermission,
        'admin': opts['admin']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportageAuthTokenSchema;

      return this.apiClient.callApi(
        '/reporting/reportageAuth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportageLink operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getReportageLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the link to a page in Reportage with the given authentication and permissions
     * Get the link to a page in Reportage with the given authentication and permissions
     * @param {String} auth The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;
     * @param {String} reportUrl The Reportage URL to try and access
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/ReportingApi~getReportageLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ReportageLinkSchema}
     */
    this.getReportageLink = function(auth, reportUrl, callback) {
      var postBody = null;

      // verify the required parameter 'auth' is set
      if (auth == undefined || auth == null) {
        throw new Error("Missing the required parameter 'auth' when calling getReportageLink");
      }

      // verify the required parameter 'reportUrl' is set
      if (reportUrl == undefined || reportUrl == null) {
        throw new Error("Missing the required parameter 'reportUrl' when calling getReportageLink");
      }


      var pathParams = {
      };
      var queryParams = {
        'auth': auth,
        'reportUrl': reportUrl
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportageLinkSchema;

      return this.apiClient.callApi(
        '/reporting/reportageLink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
