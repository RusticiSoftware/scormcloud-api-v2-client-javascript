/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateDispatchListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchLtiInfoSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateDispatchSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CreateDispatchListSchema'), require('../rustici-software-cloud-v2-model/DestinationListSchema'), require('../rustici-software-cloud-v2-model/DestinationSchema'), require('../rustici-software-cloud-v2-model/DispatchListSchema'), require('../rustici-software-cloud-v2-model/DispatchLtiInfoSchema'), require('../rustici-software-cloud-v2-model/DispatchRegistrationCountSchema'), require('../rustici-software-cloud-v2-model/DispatchSchema'), require('../rustici-software-cloud-v2-model/EnabledSchema'), require('../rustici-software-cloud-v2-model/IntegerResultSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/UpdateDispatchSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.DispatchApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CreateDispatchListSchema, root.RusticiSoftwareCloudV2.DestinationListSchema, root.RusticiSoftwareCloudV2.DestinationSchema, root.RusticiSoftwareCloudV2.DispatchListSchema, root.RusticiSoftwareCloudV2.DispatchLtiInfoSchema, root.RusticiSoftwareCloudV2.DispatchRegistrationCountSchema, root.RusticiSoftwareCloudV2.DispatchSchema, root.RusticiSoftwareCloudV2.EnabledSchema, root.RusticiSoftwareCloudV2.IntegerResultSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.UpdateDispatchSchema);
  }
}(this, function(ApiClient, BatchTagsSchema, CreateDispatchListSchema, DestinationListSchema, DestinationSchema, DispatchListSchema, DispatchLtiInfoSchema, DispatchRegistrationCountSchema, DispatchSchema, EnabledSchema, IntegerResultSchema, MessageSchema, TagListSchema, UpdateDispatchSchema) {
  'use strict';

  /**
   * Dispatch service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi
   * @version 2.0.1
   */

  /**
   * Constructs a new DispatchApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDestinations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDestinationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group of Destinations 
     * Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema} destinationsList 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createDestinations = function(destinationsList, callback) {
      var postBody = destinationsList;

      // verify the required parameter 'destinationsList' is set
      if (destinationsList === undefined || destinationsList === null) {
        throw new Error("Missing the required parameter 'destinationsList' when calling createDestinations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group of Dispatches 
     * Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  >**Caution:** >Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateDispatchListSchema} dispatchList 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createDispatches = function(dispatchList, callback) {
      var postBody = dispatchList;

      // verify the required parameter 'dispatchList' is set
      if (dispatchList === undefined || dispatchList === null) {
        throw new Error("Missing the required parameter 'dispatchList' when calling createDispatches");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Destination 
     * Deletes the specified destination.  >**Caution:** >This will also delete all dispatches belonging to the destination. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestination = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestinationDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Destination's Dispatches 
     * Deletes all the dispatches from the destination.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestinationDispatches = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestinationDispatches");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags from a Destination 
     * Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestinationTags = function(destinationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestinationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dispatch 
     * Deletes the specified dispatch.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatch = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatchPostbackInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchPostbackInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete postback information from a Dispatch 
     * Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchPostbackInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatchPostbackInfo = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatchPostbackInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/postback', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags from a Dispatch 
     * Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatchTags = function(dispatchId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatchTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group of Dispatches 
     * Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable.  >**Note:** >One of the filter parameters (i.e. `courseId`, `since`/`until`, `tags`, or `filter`) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  >**Info:** >If using one of our client libraries, refer to its README for additional information on how to work with the `X-Total-Count` header. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatches = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableRegistrationInstancing operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~enableRegistrationInstancingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update registration instancing status for a Destination's Dispatches 
     * Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~enableRegistrationInstancingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enableRegistrationInstancing = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling enableRegistrationInstancing");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling enableRegistrationInstancing");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationInstancing', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Destination 
     * Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema}
     */
    this.getDestination = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DestinationSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registration count for a Destination's Dispatches 
     * Returns the registration count for all dispatches distributed to the destination.  >**Note:** >The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema}
     */
    this.getDestinationDispatchRegistrationCount = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatchRegistrationCount");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegerResultSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationCount', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatchZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchZipCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a zip file for a Destination's Dispatches 
     * Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
     * @param {String} destinationId Identifier for the destination
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.type The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (default to SCORM_12)
     * @param {String} opts.cssUrl 
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getDestinationDispatchZip = function(destinationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatchZip");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
        'type': opts['type'],
        'cssUrl': opts['cssUrl'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/zip'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/zip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of a Destination's Dispatches 
     * Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the `courseId` filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
     * @param {String} destinationId Identifier for the destination
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema}
     */
    this.getDestinationDispatches = function(destinationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatches");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user PII hashing status for a Destination 
     * Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDestinationHashUserInfo = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationHashUserInfo");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for a Destination 
     * Returns the tags for the destination. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getDestinationTags = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Destinations 
     * Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to destination_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema}
     */
    this.getDestinations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DestinationListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Dispatch 
     * Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema}
     */
    this.getDispatch = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get enabled status of a Dispatch 
     * Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDispatchEnabled = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchEnabled");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/enabled', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user PII hashing status for a Dispatch 
     * Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDispatchHashUserInfo = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchHashUserInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/hashUserInfo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registration count for a Dispatch 
     * Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  >**Note:** >The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema}
     */
    this.getDispatchRegistrationCount = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchRegistrationCount");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchRegistrationCountSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/registrationCount', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for a Dispatch 
     * Returns the tags for the dispatch. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getDispatchTags = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchZipCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a zip package for a Dispatch 
     * Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.type The type of dispatch package to export (currently only SCORM_12 available) (default to SCORM_12)
     * @param {String} opts.cssUrl Custom CSS to apply to the dispatch package
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getDispatchZip = function(dispatchId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchZip");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
        'type': opts['type'],
        'cssUrl': opts['cssUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/zip'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/zip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Dispatches 
     * Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the `courseId` filter will allow for viewing which destinations the course has been dispatched to.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema}
     */
    this.getDispatches = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchListSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLTIDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getLTIDispatchCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchLtiInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getLTIDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchLtiInfoSchema}
     */
    this.getLTIDispatch = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getLTIDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchLtiInfoSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/lti', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a Destination 
     * Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDestinationTags = function(destinationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling putDestinationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling putDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDestinationTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group of tags to a group of Destinations 
     * Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Array of ids, and array of tags for bulk tag operations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDestinationTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch === undefined || batch === null) {
        throw new Error("Missing the required parameter 'batch' when calling putDestinationTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a Dispatch 
     * Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDispatchTags = function(dispatchId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling putDispatchTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling putDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDispatchTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group of tags to a group of Dispatches 
     * Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Array of ids, and array of tags for bulk tag operations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDispatchTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch === undefined || batch === null) {
        throw new Error("Missing the required parameter 'batch' when calling putDispatchTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDestinationDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDestinationDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset registration counts for a Destination's Dispatches 
     * Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDestinationDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetDestinationDispatchRegistrationCount = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling resetDestinationDispatchRegistrationCount");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationCount', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset registration count for a Dispatch 
     * Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetDispatchRegistrationCount = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling resetDispatchRegistrationCount");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/registrationCount', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Destination 
     * Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema} destination 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDestination = function(destinationId, destination, callback) {
      var postBody = destination;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling setDestination");
      }

      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling setDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDestinationDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update enabled status for a Destination's Dispatches 
     * Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDestinationDispatchEnabled = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling setDestinationDispatchEnabled");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling setDestinationDispatchEnabled");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/enabled', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update enabled status for a Dispatch 
     * Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDispatchEnabled = function(dispatchId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling setDispatchEnabled");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling setDispatchEnabled");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/enabled', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDestinationHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDestinationHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user PII hashing status for a Destination
     * Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDestinationHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDestinationHashUserInfo = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId === undefined || destinationId === null) {
        throw new Error("Missing the required parameter 'destinationId' when calling updateDestinationHashUserInfo");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateDestinationHashUserInfo");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information about a Dispatch 
     * Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateDispatchSchema} dispatchProperties 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDispatch = function(dispatchId, dispatchProperties, callback) {
      var postBody = dispatchProperties;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling updateDispatch");
      }

      // verify the required parameter 'dispatchProperties' is set
      if (dispatchProperties === undefined || dispatchProperties === null) {
        throw new Error("Missing the required parameter 'dispatchProperties' when calling updateDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDispatchHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user PII hashing status for a Dispatch
     * Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDispatchHashUserInfo = function(dispatchId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId === undefined || dispatchId === null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling updateDispatchHashUserInfo");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateDispatchHashUserInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/hashUserInfo', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group of Dispatches 
     * Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  >**Note:** >One of the filter parameters (i.e. `courseId`, `since`/`until`, `tags`, or `filter`) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  >**Info:** >If using one of our client libraries, refer to its README for additional information on how to work with the `X-Total-Count` header. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateDispatchSchema} dispatchProperties 
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retrieve resources having `courseId`
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDispatches = function(dispatchProperties, opts, callback) {
      opts = opts || {};
      var postBody = dispatchProperties;

      // verify the required parameter 'dispatchProperties' is set
      if (dispatchProperties === undefined || dispatchProperties === null) {
        throw new Error("Missing the required parameter 'dispatchProperties' when calling updateDispatches");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
