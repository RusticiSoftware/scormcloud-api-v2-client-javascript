/**
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateDispatchListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateDispatchSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CreateDispatchListSchema'), require('../rustici-software-cloud-v2-model/DestinationListSchema'), require('../rustici-software-cloud-v2-model/DestinationSchema'), require('../rustici-software-cloud-v2-model/DispatchListSchema'), require('../rustici-software-cloud-v2-model/DispatchRegistrationCountSchema'), require('../rustici-software-cloud-v2-model/DispatchSchema'), require('../rustici-software-cloud-v2-model/EnabledSchema'), require('../rustici-software-cloud-v2-model/IntegerResultSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/UpdateDispatchSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.DispatchApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CreateDispatchListSchema, root.RusticiSoftwareCloudV2.DestinationListSchema, root.RusticiSoftwareCloudV2.DestinationSchema, root.RusticiSoftwareCloudV2.DispatchListSchema, root.RusticiSoftwareCloudV2.DispatchRegistrationCountSchema, root.RusticiSoftwareCloudV2.DispatchSchema, root.RusticiSoftwareCloudV2.EnabledSchema, root.RusticiSoftwareCloudV2.IntegerResultSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.UpdateDispatchSchema);
  }
}(this, function(ApiClient, BatchTagsSchema, CreateDispatchListSchema, DestinationListSchema, DestinationSchema, DispatchListSchema, DispatchRegistrationCountSchema, DispatchSchema, EnabledSchema, IntegerResultSchema, MessageSchema, TagListSchema, UpdateDispatchSchema) {
  'use strict';

  /**
   * Dispatch service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DispatchApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDestinations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDestinationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsByTenant
     * Create multiple destinations.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema} destinationsList 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createDestinations = function(destinationsList, callback) {
      var postBody = destinationsList;

      // verify the required parameter 'destinationsList' is set
      if (destinationsList == undefined || destinationsList == null) {
        throw new Error("Missing the required parameter 'destinationsList' when calling createDestinations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create dispatches.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CreateDispatchListSchema} dispatchList 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~createDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createDispatches = function(dispatchList, callback) {
      var postBody = dispatchList;

      // verify the required parameter 'dispatchList' is set
      if (dispatchList == undefined || dispatchList == null) {
        throw new Error("Missing the required parameter 'dispatchList' when calling createDispatches");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsByTenantAndDestinationId
     * Delete the destination with destinationId &#x3D; {destinationId}.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestination = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestinationDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationDispatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsDispatchesByTenant
     * Delete all related dispatches.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestinationDispatches = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestinationDispatches");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags for this destination
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDestinationTags = function(destinationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling deleteDestinationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesByTenantAndDispatchId
     * Delete the dispatch with dispatchId &#x3D; {dispatchId}.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatch = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatchPostbackInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchPostbackInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesByTenantAndDispatchId
     * Delete the postback info dispatch with dispatchId &#x3D; {dispatchId}.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchPostbackInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatchPostbackInfo = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatchPostbackInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/postback', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags for this dispatch
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~deleteDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDispatchTags = function(dispatchId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling deleteDispatchTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableRegistrationInstancing operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~enableRegistrationInstancingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsDispatchesRegistrationInstancing
     * Enable or disable registration instancing.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~enableRegistrationInstancingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enableRegistrationInstancing = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling enableRegistrationInstancing");
      }

      // verify the required parameter 'enabled' is set
      if (enabled == undefined || enabled == null) {
        throw new Error("Missing the required parameter 'enabled' when calling enableRegistrationInstancing");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationInstancing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get destination information by destinationId.
     * Gets detailed information about a destination belonging to a destinationId.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema}
     */
    this.getDestination = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DestinationSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsDispatchesRegistrationCount
     * Get an aggregate count of all related dispatch registrations.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/IntegerResultSchema}
     */
    this.getDestinationDispatchRegistrationCount = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatchRegistrationCount");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegerResultSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatchZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchZipCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ZIP of related dispatches.
     * Returns a zip file containing all of the dispatch packages for a destination.
     * @param {String} destinationId Identifier for the destination
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.type The type of dispatch package to export (SCORM12 only supported in cloud today) (default to SCORM12)
     * @param {String} opts.cssUrl 
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getDestinationDispatchZip = function(destinationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatchZip");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
        'type': opts['type'],
        'cssUrl': opts['cssUrl'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/zip'];
      var returnType = File;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/zip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of dispatches in this destination
     * Get a list of related dispatches.
     * @param {String} destinationId Identifier for the destination
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retreive resources having &#x60;courseId&#x60; 
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema}
     */
    this.getDestinationDispatches = function(destinationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationDispatches");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'more': opts['more'],
        'since': opts['since'],
        'until': opts['until'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'datetimeFilter': opts['datetimeFilter'],
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * True if the destination is set to hash user info, or false if it is disabled.
     * True if the destination is set to hash user info, or false if it is disabled.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDestinationHashUserInfo = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationHashUserInfo");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for this destination
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getDestinationTags = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling getDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinations operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllDestinations
     * Get a list of destinations.
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retreive resources having &#x60;courseId&#x60; 
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc (default to updated_asc)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationListSchema}
     */
    this.getDestinations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'more': opts['more'],
        'since': opts['since'],
        'until': opts['until'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'datetimeFilter': opts['datetimeFilter'],
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DestinationListSchema;

      return this.apiClient.callApi(
        '/dispatch/destinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dispatch by id.
     * Get the dispatch with &#x60;dispatchId&#x60;. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchSchema}
     */
    this.getDispatch = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesEnabledByTenantAndDispatchId
     * True if the dispatch is enabled, or false if it is disabled.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDispatchEnabled = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchEnabled");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/enabled', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get if this dispatch has PII hashing enabled.
     * True if the dispatch is set to hash user info, or false if it is disabled.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema}
     */
    this.getDispatchHashUserInfo = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchHashUserInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EnabledSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/hashUserInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesRegistrationCountByTenant
     * Get the registration count for this dispatch, and the date and time of the last count reset, if any.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchRegistrationCountSchema}
     */
    this.getDispatchRegistrationCount = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchRegistrationCount");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchRegistrationCountSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/registrationCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for this dispatch
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getDispatchTags = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatchZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchZipCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ZIP for the dispatchId.
     * Get the ZIP for the dispatch with dispatchId &#x3D; {dispatchId}.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.type The type of dispatch package to export (SCORM12 only supported in cloud today) (default to SCORM12)
     * @param {String} opts.cssUrl 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getDispatchZip = function(dispatchId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling getDispatchZip");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
        'type': opts['type'],
        'cssUrl': opts['cssUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/zip'];
      var returnType = File;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/zip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDispatches operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Dispatches in the system for an AppId
     * Get a list of dispatches.
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId Only retreive resources having &#x60;courseId&#x60; 
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc (default to updated_asc)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~getDispatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DispatchListSchema}
     */
    this.getDispatches = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'courseId': opts['courseId'],
        'more': opts['more'],
        'since': opts['since'],
        'until': opts['until'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'datetimeFilter': opts['datetimeFilter'],
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchListSchema;

      return this.apiClient.callApi(
        '/dispatch/dispatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDestinationTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the tags for this destination
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDestinationTags = function(destinationId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling putDestinationTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling putDestinationTags");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDestinationTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets all of the provided tags on all of the provided destinations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Object representing an array of ids to apply an array of tags to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDestinationTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDestinationTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch == undefined || batch == null) {
        throw new Error("Missing the required parameter 'batch' when calling putDestinationTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDispatchTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the tags for this dispatch
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDispatchTags = function(dispatchId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling putDispatchTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling putDispatchTags");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDispatchTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets all of the provided tags on all of the provided dispatches
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Object representing an array of ids to apply an array of tags to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~putDispatchTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDispatchTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch == undefined || batch == null) {
        throw new Error("Missing the required parameter 'batch' when calling putDispatchTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDestinationDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDestinationDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsDispatchesRegistrationCount
     * Reset registration counts for all related dispatches.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDestinationDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetDestinationDispatchRegistrationCount = function(destinationId, callback) {
      var postBody = null;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling resetDestinationDispatchRegistrationCount");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/registrationCount', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDispatchRegistrationCount operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDispatchRegistrationCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesRegistrationCountByTenant
     * Reset the registration count for this dispatch.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~resetDispatchRegistrationCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetDispatchRegistrationCount = function(dispatchId, callback) {
      var postBody = null;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling resetDispatchRegistrationCount");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/registrationCount', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDestination operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the destination identified by the &#x60;destinationId&#x60; provided in the path. If the destination is being created, a name should be provided in the DestinationSchema, else an error will be thrown. You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. If you do not supply an e-mail address upon the creation of a destination, the owner of the Realm will be used.  This can, of course, also be changed via calling this method to update an existing destination.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/DestinationSchema} destination 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDestination = function(destinationId, destination, callback) {
      var postBody = destination;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling setDestination");
      }

      // verify the required parameter 'destination' is set
      if (destination == undefined || destination == null) {
        throw new Error("Missing the required parameter 'destination' when calling setDestination");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDestinationDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DestinationsDispatchesEnabledByTenant
     * Enable or disable all related dispatches.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDestinationDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDestinationDispatchEnabled = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling setDestinationDispatchEnabled");
      }

      // verify the required parameter 'enabled' is set
      if (enabled == undefined || enabled == null) {
        throw new Error("Missing the required parameter 'enabled' when calling setDestinationDispatchEnabled");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/enabled', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDispatchEnabled operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDispatchEnabledCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DispatchesEnabledByTenantAndDispatchId
     * Enable or disabled the dispatch.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~setDispatchEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDispatchEnabled = function(dispatchId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling setDispatchEnabled");
      }

      // verify the required parameter 'enabled' is set
      if (enabled == undefined || enabled == null) {
        throw new Error("Missing the required parameter 'enabled' when calling setDispatchEnabled");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/enabled', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDestinationHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDestinationHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable hashing of the user info for the destination.
     * Enable or disable hashing of the user info for the destination.
     * @param {String} destinationId Identifier for the destination
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDestinationHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDestinationHashUserInfo = function(destinationId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling updateDestinationHashUserInfo");
      }

      // verify the required parameter 'enabled' is set
      if (enabled == undefined || enabled == null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateDestinationHashUserInfo");
      }


      var pathParams = {
        'destinationId': destinationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDispatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the dispatch with &#x60;dispatchId&#x60;. 
     * Update the dispatch with &#x60;dispatchId&#x60;. 
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/UpdateDispatchSchema} dispatchProperties 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDispatch = function(dispatchId, dispatchProperties, callback) {
      var postBody = dispatchProperties;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling updateDispatch");
      }

      // verify the required parameter 'dispatchProperties' is set
      if (dispatchProperties == undefined || dispatchProperties == null) {
        throw new Error("Missing the required parameter 'dispatchProperties' when calling updateDispatch");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDispatchHashUserInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchHashUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable hashing of the user info for the dispatch.
     * Enable or disable hashing of the user info for the dispatch.
     * @param {String} dispatchId Identifier for the dispatch
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/EnabledSchema} enabled 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/DispatchApi~updateDispatchHashUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDispatchHashUserInfo = function(dispatchId, enabled, callback) {
      var postBody = enabled;

      // verify the required parameter 'dispatchId' is set
      if (dispatchId == undefined || dispatchId == null) {
        throw new Error("Missing the required parameter 'dispatchId' when calling updateDispatchHashUserInfo");
      }

      // verify the required parameter 'enabled' is set
      if (enabled == undefined || enabled == null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateDispatchHashUserInfo");
      }


      var pathParams = {
        'dispatchId': dispatchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dispatch/dispatches/{dispatchId}/hashUserInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
