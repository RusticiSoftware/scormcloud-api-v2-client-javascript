/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LearnerSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/LearnerSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.LearnerApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.LearnerSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.TagListSchema);
  }
}(this, function(ApiClient, BatchTagsSchema, LearnerSchema, MessageSchema, TagListSchema) {
  'use strict';

  /**
   * Learner service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi
   * @version 2.0.1
   */

  /**
   * Constructs a new LearnerApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteAllLearnerData operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~deleteAllLearnerDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all PII for a learnerId 
     * Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  >**Note:** >This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
     * @param {String} learnerId The id of the learner
     * @param {String} userEmail The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~deleteAllLearnerDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllLearnerData = function(learnerId, userEmail, callback) {
      var postBody = null;

      // verify the required parameter 'learnerId' is set
      if (learnerId === undefined || learnerId === null) {
        throw new Error("Missing the required parameter 'learnerId' when calling deleteAllLearnerData");
      }

      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling deleteAllLearnerData");
      }


      var pathParams = {
        'learnerId': learnerId
      };
      var queryParams = {
        'userEmail': userEmail,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/{learnerId}/delete-information', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLearnerTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~deleteLearnerTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags from a learnerId 
     * Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
     * @param {String} learnerId The id of the learner
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~deleteLearnerTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLearnerTags = function(learnerId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'learnerId' is set
      if (learnerId === undefined || learnerId === null) {
        throw new Error("Missing the required parameter 'learnerId' when calling deleteLearnerTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteLearnerTags");
      }


      var pathParams = {
        'learnerId': learnerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/{learnerId}/tags', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLearnerTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~getLearnerTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for a learnerId 
     * Returns the tags for the learner. 
     * @param {String} learnerId The id of the learner
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~getLearnerTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getLearnerTags = function(learnerId, callback) {
      var postBody = null;

      // verify the required parameter 'learnerId' is set
      if (learnerId === undefined || learnerId === null) {
        throw new Error("Missing the required parameter 'learnerId' when calling getLearnerTags");
      }


      var pathParams = {
        'learnerId': learnerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/learner/{learnerId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putLearnerTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~putLearnerTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a learnerId 
     * Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
     * @param {String} learnerId The id of the learner
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~putLearnerTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putLearnerTags = function(learnerId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'learnerId' is set
      if (learnerId === undefined || learnerId === null) {
        throw new Error("Missing the required parameter 'learnerId' when calling putLearnerTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling putLearnerTags");
      }


      var pathParams = {
        'learnerId': learnerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/{learnerId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putLearnerTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~putLearnerTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group of tags to a group of learnerIds 
     * Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Array of ids, and array of tags for bulk tag operations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~putLearnerTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putLearnerTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch === undefined || batch === null) {
        throw new Error("Missing the required parameter 'batch' when calling putLearnerTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLearnerInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~updateLearnerInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all Registrations for a learnerId 
     * Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided `learnerId` is attached to.  >**Caution:** >Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  >**Note:** >This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
     * @param {String} learnerId The id of the learner
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LearnerSchema} learnerInfo 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/LearnerApi~updateLearnerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLearnerInfo = function(learnerId, learnerInfo, callback) {
      var postBody = learnerInfo;

      // verify the required parameter 'learnerId' is set
      if (learnerId === undefined || learnerId === null) {
        throw new Error("Missing the required parameter 'learnerId' when calling updateLearnerInfo");
      }

      // verify the required parameter 'learnerInfo' is set
      if (learnerInfo === undefined || learnerInfo === null) {
        throw new Error("Missing the required parameter 'learnerInfo' when calling updateLearnerInfo");
      }


      var pathParams = {
        'learnerId': learnerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/{learnerId}/updateInfo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
