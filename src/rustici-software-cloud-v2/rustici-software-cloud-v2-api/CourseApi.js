/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/FileListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportAssetRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportFetchRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/PreviewLaunchLinkRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ResponseError', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TitleSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/AssetFileSchema'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CourseListNonPagedSchema'), require('../rustici-software-cloud-v2-model/CourseListSchema'), require('../rustici-software-cloud-v2-model/CourseSchema'), require('../rustici-software-cloud-v2-model/FileListSchema'), require('../rustici-software-cloud-v2-model/ImportAssetRequestSchema'), require('../rustici-software-cloud-v2-model/ImportFetchRequestSchema'), require('../rustici-software-cloud-v2-model/ImportJobResultSchema'), require('../rustici-software-cloud-v2-model/ImportRequestSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/PreviewLaunchLinkRequestSchema'), require('../rustici-software-cloud-v2-model/ResponseError'), require('../rustici-software-cloud-v2-model/SettingListSchema'), require('../rustici-software-cloud-v2-model/SettingsPostSchema'), require('../rustici-software-cloud-v2-model/StringResultSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/TitleSchema'), require('../rustici-software-cloud-v2-model/XapiStatementResult'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.CourseApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.AssetFileSchema, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CourseListNonPagedSchema, root.RusticiSoftwareCloudV2.CourseListSchema, root.RusticiSoftwareCloudV2.CourseSchema, root.RusticiSoftwareCloudV2.FileListSchema, root.RusticiSoftwareCloudV2.ImportAssetRequestSchema, root.RusticiSoftwareCloudV2.ImportFetchRequestSchema, root.RusticiSoftwareCloudV2.ImportJobResultSchema, root.RusticiSoftwareCloudV2.ImportRequestSchema, root.RusticiSoftwareCloudV2.LaunchLinkSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.PreviewLaunchLinkRequestSchema, root.RusticiSoftwareCloudV2.ResponseError, root.RusticiSoftwareCloudV2.SettingListSchema, root.RusticiSoftwareCloudV2.SettingsPostSchema, root.RusticiSoftwareCloudV2.StringResultSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.TitleSchema, root.RusticiSoftwareCloudV2.XapiStatementResult);
  }
}(this, function(ApiClient, AssetFileSchema, BatchTagsSchema, CourseListNonPagedSchema, CourseListSchema, CourseSchema, FileListSchema, ImportAssetRequestSchema, ImportFetchRequestSchema, ImportJobResultSchema, ImportRequestSchema, LaunchLinkSchema, MessageSchema, PreviewLaunchLinkRequestSchema, ResponseError, SettingListSchema, SettingsPostSchema, StringResultSchema, TagListSchema, TitleSchema, XapiStatementResult) {
  'use strict';

  /**
   * Course service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi
   */

  /**
   * Constructs a new CourseApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buildCoursePreviewLaunchLink operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a launch link to preview a Course 
     * Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  >**Note:** >The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/PreviewLaunchLinkRequestSchema} launchLinkRequest 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.buildCoursePreviewLaunchLink = function(courseId, launchLinkRequest, callback) {
      var postBody = launchLinkRequest;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling buildCoursePreviewLaunchLink");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest === undefined || launchLinkRequest === null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling buildCoursePreviewLaunchLink");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/preview', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buildCoursePreviewLaunchLinkWithVersion operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkWithVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a launch link to preview a Course Version 
     * Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  >**Note:** >The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/PreviewLaunchLinkRequestSchema} launchLinkRequest 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkWithVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.buildCoursePreviewLaunchLinkWithVersion = function(courseId, versionId, launchLinkRequest, callback) {
      var postBody = launchLinkRequest;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling buildCoursePreviewLaunchLinkWithVersion");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling buildCoursePreviewLaunchLinkWithVersion");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest === undefined || launchLinkRequest === null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling buildCoursePreviewLaunchLinkWithVersion");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/preview', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFetchAndImportCourseJob operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createFetchAndImportCourseJobCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Course from a package fetched from an external source 
     * Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  >**Note:** >The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
     * @param {String} courseId A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportFetchRequestSchema} importRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mayCreateNewVersion Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn't already exist. (default to false)
     * @param {String} opts.postbackUrl An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createFetchAndImportCourseJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createFetchAndImportCourseJob = function(courseId, importRequest, opts, callback) {
      opts = opts || {};
      var postBody = importRequest;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling createFetchAndImportCourseJob");
      }

      // verify the required parameter 'importRequest' is set
      if (importRequest === undefined || importRequest === null) {
        throw new Error("Missing the required parameter 'importRequest' when calling createFetchAndImportCourseJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': courseId,
        'mayCreateNewVersion': opts['mayCreateNewVersion'],
        'postbackUrl': opts['postbackUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNoUploadAndImportCourseJob operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createNoUploadAndImportCourseJobCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Course from a fetched or referenced external media file 
     * Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  >**Note:** >The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  >**Info:** >Unless working with media files, it is typical to use one of the other two import methods. >- CreateUploadAndImportCourseJob would be used if the course is in your local file system. >- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
     * @param {String} courseId A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportRequestSchema} importRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mayCreateNewVersion Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn't already exist. (default to false)
     * @param {String} opts.postbackUrl An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createNoUploadAndImportCourseJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createNoUploadAndImportCourseJob = function(courseId, importRequest, opts, callback) {
      opts = opts || {};
      var postBody = importRequest;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling createNoUploadAndImportCourseJob");
      }

      // verify the required parameter 'importRequest' is set
      if (importRequest === undefined || importRequest === null) {
        throw new Error("Missing the required parameter 'importRequest' when calling createNoUploadAndImportCourseJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': courseId,
        'mayCreateNewVersion': opts['mayCreateNewVersion'],
        'postbackUrl': opts['postbackUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs/noUpload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUploadAndImportCourseJob operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createUploadAndImportCourseJobCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Course from an uploaded package 
     * Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  >**Note:** >The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
     * @param {String} courseId A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mayCreateNewVersion Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn't already exist. (default to false)
     * @param {String} opts.postbackUrl An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
     * @param {String} opts.uploadedContentType The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (default to application/zip)
     * @param {String} opts.contentMetadata Serialized 'mediaFileMetadata' schema.
     * @param {Blob} opts.file The zip file of the course contents to import. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createUploadAndImportCourseJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createUploadAndImportCourseJob = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling createUploadAndImportCourseJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': courseId,
        'mayCreateNewVersion': opts['mayCreateNewVersion'],
        'postbackUrl': opts['postbackUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'uploadedContentType': opts['uploadedContentType']
      };
      var formParams = {
        'contentMetadata': opts['contentMetadata'],
        'file': opts['file']
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourse operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Course 
     * Deletes the specified course.  >**Caution:** >When a course is deleted, so is everything connected to the course.  This includes: >- Registrations >- Invitations >- Dispatches >- Debug Logs 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourse = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourse");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseAsset operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset file from a Course 
     * Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  >**Caution:** >This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
     * @param {String} courseId 
     * @param {String} relativePath Relative path of the asset within the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseAsset = function(courseId, relativePath, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseAsset");
      }

      // verify the required parameter 'relativePath' is set
      if (relativePath === undefined || relativePath === null) {
        throw new Error("Missing the required parameter 'relativePath' when calling deleteCourseAsset");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'relativePath': relativePath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/asset', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a configuration setting explicitly set for a Course 
     * Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
     * @param {String} courseId 
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseConfigurationSetting = function(courseId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteCourseConfigurationSetting");
      }


      var pathParams = {
        'courseId': courseId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tags from a Course 
     * Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseTags = function(courseId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseVersion operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Course Version 
     * Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  >**Caution:** >When a course is deleted, so is everything connected to this course.  This includes: >- Registrations >- Invitations >- Dispatches >- Debug Logs 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseVersion = function(courseId, versionId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseVersion");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCourseVersion");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseVersionAsset operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset file from a Course Version 
     * Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  >**Caution:** >This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {String} relativePath Relative path of the asset within the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseVersionAsset = function(courseId, versionId, relativePath, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseVersionAsset");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCourseVersionAsset");
      }

      // verify the required parameter 'relativePath' is set
      if (relativePath === undefined || relativePath === null) {
        throw new Error("Missing the required parameter 'relativePath' when calling deleteCourseVersionAsset");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'relativePath': relativePath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/asset', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseVersionConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a configuration setting explicitly set for a Course Version 
     * Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseVersionConfigurationSetting = function(courseId, versionId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseVersionConfigurationSetting");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCourseVersionConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteCourseVersionConfigurationSetting");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourse operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Course 
     * Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema}
     */
    this.getCourse = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourse");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseAsset operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseAssetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an asset file from a Course 
     * Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
     * @param {String} courseId 
     * @param {String} relativePath Relative path of the asset within the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getCourseAsset = function(courseId, relativePath, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseAsset");
      }

      // verify the required parameter 'relativePath' is set
      if (relativePath === undefined || relativePath === null) {
        throw new Error("Missing the required parameter 'relativePath' when calling getCourseAsset");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'relativePath': relativePath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/courses/{courseId}/asset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective configuration settings for a Course 
     * Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getCourseConfiguration = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseConfiguration");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseFileList operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseFileListCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/FileListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of asset files in a Course 
     * Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseFileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/FileListSchema}
     */
    this.getCourseFileList = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseFileList");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/asset/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for a Course 
     * Returns xAPI statements for the course. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.learnerId Only entries for the specified learner id will be included.
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getCourseStatements = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseStatements");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/courses/{courseId}/xAPIStatements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for a Course 
     * Returns the tags for the course. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getCourseTags = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionAsset operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionAssetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an asset file from a specific Course Version 
     * Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {String} relativePath Relative path of the asset within the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getCourseVersionAsset = function(courseId, versionId, relativePath, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionAsset");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionAsset");
      }

      // verify the required parameter 'relativePath' is set
      if (relativePath === undefined || relativePath === null) {
        throw new Error("Missing the required parameter 'relativePath' when calling getCourseVersionAsset");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'relativePath': relativePath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/asset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective configuration settings for a Course Version 
     * Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getCourseVersionConfiguration = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionConfiguration");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionConfiguration");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionFileList operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionFileListCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/FileListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of asset files in a Course Version 
     * Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionFileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/FileListSchema}
     */
    this.getCourseVersionFileList = function(courseId, versionId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionFileList");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionFileList");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/asset/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed information about a Course Version 
     * Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema}
     */
    this.getCourseVersionInfo = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionInfo");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionInfo");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for a Course Version 
     * Returns xAPI statements for the course version. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.learnerId Only entries for the specified learner id will be included.
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getCourseVersionStatements = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionStatements");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionStatements");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/xAPIStatements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersions operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of a Course's Versions 
     * Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema}
     */
    this.getCourseVersions = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersions");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseListNonPagedSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseZipCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a zip package for a Course 
     * Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  >**Info:** >If looking to retrieve a specific file from a course, use `GetCourseAsset` instead. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getCourseZip = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseZip");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/courses/{courseId}/zip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourses operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCoursesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Courses 
     * Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {Date} opts.until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.datetimeFilter Specifies field that `since` and `until` parameters are applied against (default to updated)
     * @param {Array.<String>} opts.tags Filter items matching any tag provided (not all)
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  (default to course_id)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  (default to created_desc)
     * @param {String} opts.more Pagination token returned as `more` property of multi page list requests
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeTotalCount Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the `more` token.  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema}
     */
    this.getCourses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'datetimeFilter': opts['datetimeFilter'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'more': opts['more'],
        'includeCourseMetadata': opts['includeCourseMetadata'],
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeTotalCount': opts['includeTotalCount'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseListSchema;

      return this.apiClient.callApi(
        '/courses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJobStatus operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getImportJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get import job status for a Course 
     * Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  >**Note:** >The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
     * @param {String} importJobId Id received when the import job was submitted to the importJobs resource.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getImportJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema}
     */
    this.getImportJobStatus = function(importJobId, callback) {
      var postBody = null;

      // verify the required parameter 'importJobId' is set
      if (importJobId === undefined || importJobId === null) {
        throw new Error("Missing the required parameter 'importJobId' when calling getImportJobStatus");
      }


      var pathParams = {
        'importJobId': importJobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportJobResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs/{importJobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionedCourseZip operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getVersionedCourseZipCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a zip package for a Course Version 
     * Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  >**Info:** >If looking to retrieve a specific file from a course version, use `GetCourseVersionAsset` instead. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getVersionedCourseZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getVersionedCourseZip = function(courseId, versionId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getVersionedCourseZip");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getVersionedCourseZip");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/zip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importCourseAssetFile operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~importCourseAssetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an asset file for a Course 
     * Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you've made changes.  >**Info:** >If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for `mayCreateNewVersion`. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportAssetRequestSchema} assetSchema 
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.updateAssetPolicy Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are 'reject', 'strict', and 'lax'. A 'reject' policy request will fail if the asset file already exists on the system ('overwriting' not allowed). A 'strict' policy request will fail if the asset file does not already exist ('overwriting' is required). A 'lax' policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (default to lax)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~importCourseAssetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema}
     */
    this.importCourseAssetFile = function(courseId, assetSchema, opts, callback) {
      opts = opts || {};
      var postBody = assetSchema;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling importCourseAssetFile");
      }

      // verify the required parameter 'assetSchema' is set
      if (assetSchema === undefined || assetSchema === null) {
        throw new Error("Missing the required parameter 'assetSchema' when calling importCourseAssetFile");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'updateAssetPolicy': opts['updateAssetPolicy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetFileSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importCourseVersionAssetFile operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~importCourseVersionAssetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an asset file for a Course Version 
     * Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you've made changes.  >**Info:** >If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for `mayCreateNewVersion`. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportAssetRequestSchema} assetSchema 
     * @param {Object} opts Optional parameters
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.updateAssetPolicy Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are 'reject', 'strict', and 'lax'. A 'reject' policy request will fail if the asset file already exists on the system ('overwriting' not allowed). A 'strict' policy request will fail if the asset file does not already exist ('overwriting' is required). A 'lax' policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (default to lax)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~importCourseVersionAssetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema}
     */
    this.importCourseVersionAssetFile = function(courseId, versionId, assetSchema, opts, callback) {
      opts = opts || {};
      var postBody = assetSchema;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling importCourseVersionAssetFile");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling importCourseVersionAssetFile");
      }

      // verify the required parameter 'assetSchema' is set
      if (assetSchema === undefined || assetSchema === null) {
        throw new Error("Missing the required parameter 'assetSchema' when calling importCourseVersionAssetFile");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'updateAssetPolicy': opts['updateAssetPolicy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetFileSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a Course 
     * Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCourseTags = function(courseId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling putCourseTags");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling putCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCourseTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a group of tags to a group of Courses 
     * Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Array of ids, and array of tags for bulk tag operations
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCourseTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch === undefined || batch === null) {
        throw new Error("Missing the required parameter 'batch' when calling putCourseTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration settings for a Course 
     * Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseConfiguration = function(courseId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings === undefined || configurationSettings === null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setCourseConfiguration");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseTitle operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseTitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update title for a Course 
     * Updates the title of the course. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TitleSchema} title 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseTitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseTitle = function(courseId, title, callback) {
      var postBody = title;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseTitle");
      }

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling setCourseTitle");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/title', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseVersionConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseVersionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration settings for a Course Version 
     * Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseVersionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseVersionConfiguration = function(courseId, versionId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseVersionConfiguration");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling setCourseVersionConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings === undefined || configurationSettings === null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setCourseVersionConfiguration");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCourseAssetFile operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~uploadCourseAssetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an asset file for a Course 
     * Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you've made changes.  >**Info:** >If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for `mayCreateNewVersion`. 
     * @param {String} courseId 
     * @param {String} destination Relative path from the course's base directory where the asset file will be uploaded. `/Etiquette/Course.html` will upload the file into the Etiquette folder of the course. 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.file The asset file to import into the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.updateAssetPolicy Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are 'reject', 'strict', and 'lax'. A 'reject' policy request will fail if the asset file already exists on the system ('overwriting' not allowed). A 'strict' policy request will fail if the asset file does not already exist ('overwriting' is required). A 'lax' policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (default to lax)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~uploadCourseAssetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema}
     */
    this.uploadCourseAssetFile = function(courseId, destination, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling uploadCourseAssetFile");
      }

      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling uploadCourseAssetFile");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'updateAssetPolicy': opts['updateAssetPolicy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file'],
        'destination': destination
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AssetFileSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/asset/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCourseVersionAssetFile operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~uploadCourseVersionAssetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an asset file for Course Version 
     * Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you've made changes.  >**Info:** >If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for `mayCreateNewVersion`. 
     * @param {String} courseId 
     * @param {Number} versionId 
     * @param {String} destination Relative path from the course's base directory where the asset file will be uploaded. `/Etiquette/Course.html` will upload the file into the Etiquette folder of the course. 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.file The asset file to import into the course. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.updateAssetPolicy Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are 'reject', 'strict', and 'lax'. A 'reject' policy request will fail if the asset file already exists on the system ('overwriting' not allowed). A 'strict' policy request will fail if the asset file does not already exist ('overwriting' is required). A 'lax' policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (default to lax)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~uploadCourseVersionAssetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/AssetFileSchema}
     */
    this.uploadCourseVersionAssetFile = function(courseId, versionId, destination, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling uploadCourseVersionAssetFile");
      }

      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling uploadCourseVersionAssetFile");
      }

      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling uploadCourseVersionAssetFile");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'updateAssetPolicy': opts['updateAssetPolicy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file'],
        'destination': destination
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AssetFileSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/asset/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
