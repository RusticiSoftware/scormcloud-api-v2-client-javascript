/**
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportFetchRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/MessageSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/ResponseError', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/TitleSchema', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../rustici-software-cloud-v2-model/BatchTagsSchema'), require('../rustici-software-cloud-v2-model/CourseListNonPagedSchema'), require('../rustici-software-cloud-v2-model/CourseListSchema'), require('../rustici-software-cloud-v2-model/CourseSchema'), require('../rustici-software-cloud-v2-model/ImportFetchRequestSchema'), require('../rustici-software-cloud-v2-model/ImportJobResultSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkRequestSchema'), require('../rustici-software-cloud-v2-model/LaunchLinkSchema'), require('../rustici-software-cloud-v2-model/MessageSchema'), require('../rustici-software-cloud-v2-model/ResponseError'), require('../rustici-software-cloud-v2-model/SettingListSchema'), require('../rustici-software-cloud-v2-model/SettingsPostSchema'), require('../rustici-software-cloud-v2-model/StringResultSchema'), require('../rustici-software-cloud-v2-model/TagListSchema'), require('../rustici-software-cloud-v2-model/TitleSchema'), require('../rustici-software-cloud-v2-model/XapiStatementResult'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.CourseApi = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.BatchTagsSchema, root.RusticiSoftwareCloudV2.CourseListNonPagedSchema, root.RusticiSoftwareCloudV2.CourseListSchema, root.RusticiSoftwareCloudV2.CourseSchema, root.RusticiSoftwareCloudV2.ImportFetchRequestSchema, root.RusticiSoftwareCloudV2.ImportJobResultSchema, root.RusticiSoftwareCloudV2.LaunchLinkRequestSchema, root.RusticiSoftwareCloudV2.LaunchLinkSchema, root.RusticiSoftwareCloudV2.MessageSchema, root.RusticiSoftwareCloudV2.ResponseError, root.RusticiSoftwareCloudV2.SettingListSchema, root.RusticiSoftwareCloudV2.SettingsPostSchema, root.RusticiSoftwareCloudV2.StringResultSchema, root.RusticiSoftwareCloudV2.TagListSchema, root.RusticiSoftwareCloudV2.TitleSchema, root.RusticiSoftwareCloudV2.XapiStatementResult);
  }
}(this, function(ApiClient, BatchTagsSchema, CourseListNonPagedSchema, CourseListSchema, CourseSchema, ImportFetchRequestSchema, ImportJobResultSchema, LaunchLinkRequestSchema, LaunchLinkSchema, MessageSchema, ResponseError, SettingListSchema, SettingsPostSchema, StringResultSchema, TagListSchema, TitleSchema, XapiStatementResult) {
  'use strict';

  /**
   * Course service.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CourseApi. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi
   * @class
   * @param {module:rustici-software-cloud-v2/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:rustici-software-cloud-v2/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buildCoursePreviewLaunchLink operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a link to preview a course. 
     * Returns the launch link to use to preview this course. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema} launchLinkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cssUrl 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.buildCoursePreviewLaunchLink = function(courseId, launchLinkRequest, opts, callback) {
      opts = opts || {};
      var postBody = launchLinkRequest;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling buildCoursePreviewLaunchLink");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest == undefined || launchLinkRequest == null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling buildCoursePreviewLaunchLink");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'cssUrl': opts['cssUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buildCoursePreviewLaunchLinkWithVersion operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkWithVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a link to preview a particular course version. 
     * Returns the link to use to preview a particular version of a course. 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkRequestSchema} launchLinkRequest 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~buildCoursePreviewLaunchLinkWithVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/LaunchLinkSchema}
     */
    this.buildCoursePreviewLaunchLinkWithVersion = function(courseId, versionId, launchLinkRequest, callback) {
      var postBody = launchLinkRequest;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling buildCoursePreviewLaunchLinkWithVersion");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling buildCoursePreviewLaunchLinkWithVersion");
      }

      // verify the required parameter 'launchLinkRequest' is set
      if (launchLinkRequest == undefined || launchLinkRequest == null) {
        throw new Error("Missing the required parameter 'launchLinkRequest' when calling buildCoursePreviewLaunchLinkWithVersion");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LaunchLinkSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFetchAndImportCourseJob operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createFetchAndImportCourseJobCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch and import a course. 
     * An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
     * @param {String} courseId A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportFetchRequestSchema} importRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mayCreateNewVersion Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (default to false)
     * @param {String} opts.postbackUrl An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createFetchAndImportCourseJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createFetchAndImportCourseJob = function(courseId, importRequest, opts, callback) {
      opts = opts || {};
      var postBody = importRequest;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling createFetchAndImportCourseJob");
      }

      // verify the required parameter 'importRequest' is set
      if (importRequest == undefined || importRequest == null) {
        throw new Error("Missing the required parameter 'importRequest' when calling createFetchAndImportCourseJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': courseId,
        'mayCreateNewVersion': opts['mayCreateNewVersion'],
        'postbackUrl': opts['postbackUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUploadAndImportCourseJob operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createUploadAndImportCourseJobCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload and import a course.
     * An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
     * @param {String} courseId A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mayCreateNewVersion Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (default to false)
     * @param {String} opts.postbackUrl An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
     * @param {File} opts.file The zip file of the course contents to import.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~createUploadAndImportCourseJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/StringResultSchema}
     */
    this.createUploadAndImportCourseJob = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling createUploadAndImportCourseJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'courseId': courseId,
        'mayCreateNewVersion': opts['mayCreateNewVersion'],
        'postbackUrl': opts['postbackUrl']
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file']
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = StringResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourse operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course. 
     * Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourse = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourse");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear a course configuration. 
     * Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
     * @param {String} courseId 
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseConfigurationSetting = function(courseId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId == undefined || settingId == null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteCourseConfigurationSetting");
      }


      var pathParams = {
        'courseId': courseId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete course tags. 
     * Delete the provided tags from this course. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseTags = function(courseId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling deleteCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseVersion operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course version. 
     * Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseVersion = function(courseId, versionId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseVersion");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCourseVersion");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseVersionConfigurationSetting operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionConfigurationSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear a configuration setting for a version of a course. 
     * Clears the &#x60;settingId&#x60; value for this course and version. 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {String} settingId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~deleteCourseVersionConfigurationSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseVersionConfigurationSetting = function(courseId, versionId, settingId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling deleteCourseVersionConfigurationSetting");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCourseVersionConfigurationSetting");
      }

      // verify the required parameter 'settingId' is set
      if (settingId == undefined || settingId == null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteCourseVersionConfigurationSetting");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId,
        'settingId': settingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration/{settingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourse operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get course details. 
     * Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema}
     */
    this.getCourse = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourse");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get course configuration. 
     * Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getCourseConfiguration = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseConfiguration");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get course xAPI statements. 
     * Get xAPI statements for &#x60;courseId&#x60;. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.learnerId Only entries for the specified learner id will be included.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getCourseStatements = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseStatements");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/courses/{courseId}/xAPIStatements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get course tags. 
     * Get a list of the tags for this course. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema}
     */
    this.getCourseTags = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration for a version of a course. 
     * Returns all configuration settings for this course and version. 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeMetadata  (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingListSchema}
     */
    this.getCourseVersionConfiguration = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionConfiguration");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionConfiguration");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'includeMetadata': opts['includeMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingListSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionInfo operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details on a course version. 
     * Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseSchema}
     */
    this.getCourseVersionInfo = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionInfo");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionInfo");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersionStatements operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xAPI statements for a course version. 
     * Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {Object} opts Optional parameters
     * @param {String} opts.learnerId Only entries for the specified learner id will be included.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/XapiStatementResult}
     */
    this.getCourseVersionStatements = function(courseId, versionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersionStatements");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCourseVersionStatements");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
        'learnerId': opts['learnerId'],
        'since': opts['since'],
        'until': opts['until'],
        'more': opts['more']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = XapiStatementResult;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/xAPIStatements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourseVersions operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details on a course&#39;s versions. 
     * Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
     * @param {String} courseId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCourseVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListNonPagedSchema}
     */
    this.getCourseVersions = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling getCourseVersions");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseListNonPagedSchema;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourses operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCoursesCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all courses. 
     * Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
     * @param {Date} opts.since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {Date} opts.until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
     * @param {String} opts.filter Optional string which filters results by a specified field (described by filterBy).
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.filterBy Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/String} opts.orderBy Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc.
     * @param {Boolean} opts.includeRegistrationCount Include the registration count in the results (default to false)
     * @param {Boolean} opts.includeCourseMetadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
     * @param {Array.<String>} opts.tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/CourseListSchema}
     */
    this.getCourses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'more': opts['more'],
        'since': opts['since'],
        'until': opts['until'],
        'filter': opts['filter'],
        'filterBy': opts['filterBy'],
        'orderBy': opts['orderBy'],
        'includeRegistrationCount': opts['includeRegistrationCount'],
        'includeCourseMetadata': opts['includeCourseMetadata'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CourseListSchema;

      return this.apiClient.callApi(
        '/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJobStatus operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getImportJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get course import job status. 
     * Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
     * @param {String} importJobId Id received when the import job was submitted to the importJobs resource.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~getImportJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportJobResultSchema}
     */
    this.getImportJobStatus = function(importJobId, callback) {
      var postBody = null;

      // verify the required parameter 'importJobId' is set
      if (importJobId == undefined || importJobId == null) {
        throw new Error("Missing the required parameter 'importJobId' when calling getImportJobStatus");
      }


      var pathParams = {
        'importJobId': importJobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportJobResultSchema;

      return this.apiClient.callApi(
        '/courses/importJobs/{importJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCourseTags operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set course tags. 
     * Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TagListSchema} tags 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCourseTags = function(courseId, tags, callback) {
      var postBody = tags;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling putCourseTags");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling putCourseTags");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCourseTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set tags on courses. 
     * Sets all of the provided tags on all of the provided courses. 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Object representing an array of ids to apply an array of tags to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putCourseTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCourseTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch == undefined || batch == null) {
        throw new Error("Missing the required parameter 'batch' when calling putCourseTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putLearnerTagsBatch operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putLearnerTagsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets all of the provided tags on all of the provided learners
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/BatchTagsSchema} batch Object representing an array of ids to apply an array of tags to.
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~putLearnerTagsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putLearnerTagsBatch = function(batch, callback) {
      var postBody = batch;

      // verify the required parameter 'batch' is set
      if (batch == undefined || batch == null) {
        throw new Error("Missing the required parameter 'batch' when calling putLearnerTagsBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/learner/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set course configuration. 
     * Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseConfiguration = function(courseId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings == undefined || configurationSettings == null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setCourseConfiguration");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseTitle operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseTitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the title of a course. 
     * Sets the course title for the provided courseId. 
     * @param {String} courseId 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/TitleSchema} title 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseTitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseTitle = function(courseId, title, callback) {
      var postBody = title;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseTitle");
      }

      // verify the required parameter 'title' is set
      if (title == undefined || title == null) {
        throw new Error("Missing the required parameter 'title' when calling setCourseTitle");
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/title', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCourseVersionConfiguration operation.
     * @callback module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseVersionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration for a version of a course. 
     * Set configuration settings for this course and version. 
     * @param {String} courseId 
     * @param {Number} versionId The course version
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingsPostSchema} configurationSettings 
     * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-api/CourseApi~setCourseVersionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCourseVersionConfiguration = function(courseId, versionId, configurationSettings, callback) {
      var postBody = configurationSettings;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw new Error("Missing the required parameter 'courseId' when calling setCourseVersionConfiguration");
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw new Error("Missing the required parameter 'versionId' when calling setCourseVersionConfiguration");
      }

      // verify the required parameter 'configurationSettings' is set
      if (configurationSettings == undefined || configurationSettings == null) {
        throw new Error("Missing the required parameter 'configurationSettings' when calling setCourseVersionConfiguration");
      }


      var pathParams = {
        'courseId': courseId,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APP_NORMAL', 'OAUTH'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{courseId}/versions/{versionId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
