/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.ImportConnectorRequestSchema = factory(root.RusticiSoftwareCloudV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ImportConnectorRequestSchema model module.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportConnectorRequestSchema
   * @version 2.1.0
   */

  /**
   * Constructs a new <code>ImportConnectorRequestSchema</code>.
   * Used to create a course from a content connector. Before creating a course using this schema, a content connector must be created using the `/contentConnectors` API endpoints. Once a content connector has been created, this schema can be used to create a course that can be launched using that connector.  For example, this schema is used to import an LTI 1.3 Tool to be consumed by SCORM Cloud acting as the LTI Platform. 
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportConnectorRequestSchema
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ImportConnectorRequestSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportConnectorRequestSchema} obj Optional instance to populate.
   * @return {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/ImportConnectorRequestSchema} The populated <code>ImportConnectorRequestSchema</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('connectorId'))
        obj.connectorId = ApiClient.convertToType(data['connectorId'], 'String');
      if (data.hasOwnProperty('connectorIdForContent'))
        obj.connectorIdForContent = ApiClient.convertToType(data['connectorIdForContent'], 'String');
      if (data.hasOwnProperty('metadataForConnector'))
        obj.metadataForConnector = ApiClient.convertToType(data['metadataForConnector'], Object);
    }
    return obj;
  }

  /**
   * The connector to use for this course
   * @member {String} connectorId
   */
  exports.prototype.connectorId = undefined;

  /**
   * The id the connector provides to identify this content
   * @member {String} connectorIdForContent
   */
  exports.prototype.connectorIdForContent = undefined;

  /**
   * The metadata for this connector, format is implementation specific
   * @member {Object} metadataForConnector
   */
  exports.prototype.metadataForConnector = undefined;


  return exports;

}));
