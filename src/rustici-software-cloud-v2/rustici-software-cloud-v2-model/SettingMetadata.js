/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['rustici-software-cloud-v2/ApiClient', 'rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingValidValue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SettingValidValue'));
  } else {
    // Browser globals (root is window)
    if (!root.RusticiSoftwareCloudV2) {
      root.RusticiSoftwareCloudV2 = {};
    }
    root.RusticiSoftwareCloudV2.SettingMetadata = factory(root.RusticiSoftwareCloudV2.ApiClient, root.RusticiSoftwareCloudV2.SettingValidValue);
  }
}(this, function(ApiClient, SettingValidValue) {
  'use strict';

  /**
   * The SettingMetadata model module.
   * @module rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingMetadata
   * @version 2.0.1
   */

  /**
   * Constructs a new <code>SettingMetadata</code>.
   * @alias module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingMetadata
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SettingMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingMetadata} obj Optional instance to populate.
   * @return {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingMetadata} The populated <code>SettingMetadata</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('default'))
        obj._default = ApiClient.convertToType(data['default'], 'String');
      if (data.hasOwnProperty('dataType'))
        obj.dataType = ApiClient.convertToType(data['dataType'], 'String');
      if (data.hasOwnProperty('settingDescription'))
        obj.settingDescription = ApiClient.convertToType(data['settingDescription'], 'String');
      if (data.hasOwnProperty('level'))
        obj.level = ApiClient.convertToType(data['level'], 'String');
      if (data.hasOwnProperty('learningStandards'))
        obj.learningStandards = ApiClient.convertToType(data['learningStandards'], ['String']);
      if (data.hasOwnProperty('learningStandardVariant'))
        obj.learningStandardVariant = ApiClient.convertToType(data['learningStandardVariant'], 'String');
      if (data.hasOwnProperty('fallback'))
        obj.fallback = ApiClient.convertToType(data['fallback'], 'String');
      if (data.hasOwnProperty('validValues'))
        obj.validValues = ApiClient.convertToType(data['validValues'], [SettingValidValue]);
    }
    return obj;
  }

  /**
   * Default value of this setting
   * @member {String} _default
   */
  exports.prototype._default = undefined;

  /**
   * The data type of this setting
   * @member {String} dataType
   */
  exports.prototype.dataType = undefined;

  /**
   * description of this setting
   * @member {String} settingDescription
   */
  exports.prototype.settingDescription = undefined;

  /**
   * The level this setting will be applied at, which limits where it can be set. For example, WebPathToContentRoot is applied at the application level, so it's not valid to set it for a registration.
   * @member {String} level
   */
  exports.prototype.level = undefined;

  /**
   * The list of learning standards this setting applies to. If not present, this setting is not limited to certain learning standards.
   * @member {Array.<String>} learningStandards
   */
  exports.prototype.learningStandards = undefined;

  /**
   * Does this setting apply to only single-SCO packages, only multi-SCO, or either?
   * @member {module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingMetadata.LearningStandardVariantEnum} learningStandardVariant
   * @default 'either'
   */
  exports.prototype.learningStandardVariant = 'either';

  /**
   * A setting that will be used instead of this setting if no value is provided for this setting (This is similar to a default, except that the the value of another setting is being used instead of a fixed default value).
   * @member {String} fallback
   */
  exports.prototype.fallback = undefined;

  /**
   * For settings with a fixed list of valid values, the list of those values
   * @member {Array.<module:rustici-software-cloud-v2/rustici-software-cloud-v2-model/SettingValidValue>} validValues
   */
  exports.prototype.validValues = undefined;



  /**
   * Allowed values for the <code>learningStandardVariant</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LearningStandardVariantEnum = {
    /**
     * value: "singleScoOnly"
     * @const
     */
    singleScoOnly: "singleScoOnly",

    /**
     * value: "multiScoOnly"
     * @const
     */
    multiScoOnly: "multiScoOnly",

    /**
     * value: "either"
     * @const
     */
    either: "either"
  };

  return exports;

}));
